/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package gui;
import beans.ResultatConcours;
import service.ResultatConcoursService;
import service.ParticipantService;
import service.ConcoursInterneService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class ResultatconcoursForm extends javax.swing.JInternalFrame {
   private ResultatConcoursService resultatService;
    private ParticipantService participantService;
    private ConcoursInterneService concoursService;
    private DefaultTableModel model;
    /**
     * Creates new form ResultatconcoursForm
     */
    public ResultatconcoursForm() {
        initComponents();
        this.setTitle("Gestion des Résultats des Concours");
        resultatService = new ResultatConcoursService();
        participantService = new ParticipantService();
        concoursService = new ConcoursInterneService();
        model = (DefaultTableModel) listeResultats.getModel();
        load();
    }
    public void load() {
        model.setRowCount(0);
        for (ResultatConcours r : resultatService.findAllResults()) {
            model.addRow(new Object[]{r.getId(), r.getConcoursId(), r.getParticipantId(), r.getNote()});
        }
    }
    private void bnAddActionPerformed(java.awt.event.ActionEvent evt) {
        int concoursId = (int) cmbConcours.getSelectedItem(); // Assurez-vous que le JComboBox contient des IDs
        int participantId = (int) cmbParticipant.getSelectedItem(); // Assurez-vous que le JComboBox contient des IDs
        int note;

        try {
            note = Integer.parseInt(txtNote.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Veuillez entrer une note valide.");
            return;
        }

        ResultatConcours resultat = new ResultatConcours(0, concoursId, participantId, note);
        if (resultatService.addResult(resultat)) {
            JOptionPane.showMessageDialog(this, "Résultat ajouté avec succès.");
            load();
        } else {
            JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout du résultat.");
        }
    }

    private void bnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = listeResultats.getSelectedRow();
        if (selectedRow != -1) {
            int resultatId = (int) model.getValueAt(selectedRow, 0);
            if (resultatService.deleteResult(resultatId)) {
                JOptionPane.showMessageDialog(this, "Résultat supprimé avec succès.");
                load();
            } else {
                JOptionPane.showMessageDialog(this, "Erreur lors de la suppression du résultat.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un résultat à supprimer.");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
